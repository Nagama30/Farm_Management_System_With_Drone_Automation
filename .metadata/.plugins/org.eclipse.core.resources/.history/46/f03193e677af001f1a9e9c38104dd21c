package application;

import javafx.animation.PathTransition;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.util.Duration;

public class DroneAnimation {
    private ImageView drone;
    private Label droneLabel;
    private Pane visualizationPane;

    public DroneAnimation(Pane visualizationPane) {
        this.visualizationPane = visualizationPane;

        // Load the drone image
        Image droneImage = new Image(getClass().getResourceAsStream("drone.png"));
        drone = new ImageView(droneImage);
        drone.setFitWidth(50); // Set the width of the image
        drone.setFitHeight(50); // Set the height of the image
        drone.setLayoutX(30); // Initial base X position
        drone.setLayoutY(30); // Initial base Y position
        
     // Add the label above the drone
        droneLabel = new Label("Drone");
        droneLabel.setLayoutX(drone.getLayoutX() + 10); // Position label above the drone
        droneLabel.setLayoutY(drone.getLayoutY() - 20); // Offset label above the image

        // Add the drone and label to the visualization pane
        visualizationPane.getChildren().addAll(drone, droneLabel);
    }

    public void visit(double x, double y) {
        double hoverX = clamp(x, 0, visualizationPane.getPrefWidth() - drone.getFitWidth());
        double hoverY = clamp(y, 0, visualizationPane.getPrefHeight() - drone.getFitHeight());

        // Bring the drone and its label to the front
        drone.toFront();
        droneLabel.toFront();

        Line path = new Line(drone.getLayoutX(), drone.getLayoutY(), hoverX, hoverY);
        PathTransition transition = new PathTransition(Duration.seconds(2), path, drone);

        transition.setOnFinished(event -> {
            // Update the drone's position
            drone.setLayoutX(hoverX);
            drone.setLayoutY(hoverY);

        });

        transition.play();
    }

    public void returnToBase() {
        visit(30, 30); // Return to the base position
    }

    private double clamp(double value, double min, double max) {
        return Math.max(min, Math.min(max, value));
    }
}
